#!/usr/bin/env bash
# Script-Release : Safe interactive release helper for scripts & CLIs
# Â© 2025 Josh Gallant â€“ MIT License

set -euo pipefail

VERSION="v1.0.6"

### === Configurable Constants === ###
YOUR_GITHUB_USERNAME="joshgallantt"
TMPDIR="$(mktemp -d)"
TAP_REPO="git@github.com:${YOUR_GITHUB_USERNAME}/homebrew-tap.git"
GITHUB_HOMEPAGE_BASE="https://github.com/${YOUR_GITHUB_USERNAME}"
DEFAULT_TEST_FLAG="--version"

### === Logging === ###
info()  { echo -e "\033[1;34m[INFO]\033[0m $*"; }
warn()  { echo -e "\033[1;33m[WARN]\033[0m $*"; }
error() { echo -e "\033[1;31m[ERROR]\033[0m $*" >&2; }

confirm() {
  read -rp "$1 [y/N]: " response
  [[ "$response" =~ ^[Yy]([Ee][Ss])?$ ]]
}

ask() {
  local prompt=$1
  local default=${2:-}
  read -rp "$prompt${default:+ [$default]}: " input
  echo "${input:-$default}"
}

### === Cleanup === ###
cleanup() {
  info "Cleaning up temporary files..."
  rm -rf "$TMPDIR"
}

### === Requirements === ###
require_commands() {
  for cmd in git gh sha256sum; do
    command -v "$cmd" >/dev/null || { error "Missing required command: $cmd"; exit 1; }
  done
}

get_repo_name() {
  git rev-parse --show-toplevel >/dev/null || {
    error "Not inside a Git repository."
    exit 1
  }
  basename "$(git rev-parse --show-toplevel)"
}

to_pascal_case() {
  echo "$1" | sed -E 's/[^a-zA-Z0-9]+/ /g' \
           | awk '{ for (i=1;i<=NF;i++) $i=toupper(substr($i,1,1)) substr($i,2) }1' \
           | tr -d ' '
}

to_kebab_case() {
  echo "$1" | \
    sed -E 's/([a-z0-9])([A-Z])/\1-\2/g' | \
    tr '[:upper:]' '[:lower:]'
}

validate_kebab_case_filename() {
  local name="$1"
  if [[ ! "$name" =~ ^[a-z0-9]+(-[a-z0-9]+)*$ ]]; then
    local suggestion
    suggestion=$(to_kebab_case "$name")
    error "Binary filename '$name' must be in kebab-case (e.g., my-tool-name)"
    error "Suggested fix: Rename your repo and file to: '$suggestion'"
    exit 1
  fi
}

detect_license() {
  for file in LICENSE LICENSE.txt LICENSE.md; do
    if [[ -f "$file" ]]; then
      if grep -qi 'MIT License' "$file"; then
        echo "MIT"
        return
      elif grep -qi 'Apache License, Version 2.0' "$file"; then
        echo "Apache-2.0"
        return
      elif grep -qi 'GNU GENERAL PUBLIC LICENSE' "$file"; then
        grep -qi 'version 3' "$file" && echo "GPL-3.0" && return
        grep -qi 'version 2' "$file" && echo "GPL-2.0" && return
      fi
    fi
  done
  echo "UNKNOWN"
}

generate_sha256() {
  sha256sum "$1" | awk '{print $1}'
}

tag_exists_remote() {
  git ls-remote --tags origin "refs/tags/$1" | grep -q "$1"
}

release_exists_github() {
  gh release view "$1" >/dev/null 2>&1
}

prepare_metadata() {
  REPO_NAME=$(get_repo_name)
  validate_kebab_case_filename "$REPO_NAME"
  info "ðŸš€ Starting release for ${REPO_NAME}..."

  BINARY_NAME="$REPO_NAME"
  BINARY_PATH="./$BINARY_NAME"
  FORMULA_FILE="${BINARY_NAME}.rb"
  FORMULA_CLASS=$(to_pascal_case "$BINARY_NAME")

  if [[ ! -x "$BINARY_PATH" ]]; then
    error "Expected executable './${BINARY_NAME}' not found."
    warn "Ensure the file exists, is named '${BINARY_NAME}', and is executable (chmod +x)."
    exit 1
  fi

  if ! git diff --quiet || ! git diff --cached --quiet; then
    error "You have uncommitted changes. Please commit or stash before releasing."
    exit 1
  fi

  DETECTED_VERSION=$("$BINARY_PATH" "$DEFAULT_TEST_FLAG" 2>/dev/null | grep -Eo 'v?[0-9]+\.[0-9]+\.[0-9]+' | head -n1 || true)
  if [[ -z "$DETECTED_VERSION" ]]; then
    error "Unable to detect version from '${BINARY_PATH} ${DEFAULT_TEST_FLAG}'. Script must output a semantic version."
    exit 1
  fi

  if [[ ! "$DETECTED_VERSION" =~ ^v?[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
    error "Detected version '$DETECTED_VERSION' is not valid semantic versioning (e.g., 1.2.3 or v1.2.3)"
    exit 1
  fi

  VERSION_TAG="v${DETECTED_VERSION#v}"
  info "Detected version from binary: ${VERSION_TAG}"

  if tag_exists_remote "$VERSION_TAG" || release_exists_github "$VERSION_TAG"; then
    warn "Version tag ${VERSION_TAG} already exists on remote."
    if confirm "Do you want to overwrite the existing tag and GitHub release?"; then
      info "Preparing to overwrite ${VERSION_TAG}..."
      git tag -d "$VERSION_TAG" 2>/dev/null || true
      git push --delete origin "$VERSION_TAG" 2>/dev/null || true
      gh release delete "$VERSION_TAG" --yes 2>/dev/null || true
    else
      error "Aborting. Please bump the version in the script and try again."
      exit 1
    fi
  fi

  DESCRIPTION=$(ask "Short description (optional, for Homebrew formula)")
  [[ -z "$DESCRIPTION" ]] && warn "No description provided. Formula will omit it."
}

tag_version() {
  git tag "$VERSION_TAG"
  git push origin "$VERSION_TAG"
  info "Git tag '$VERSION_TAG' pushed."
}

package_binary() {
  info "Packaging script..."
  chmod +x "$BINARY_PATH"

  PKG_DIR="$TMPDIR/package"
  mkdir -p "$PKG_DIR"

  TARBALL="$PKG_DIR/${BINARY_NAME}-${VERSION_TAG}.tar.gz"
  tar -czf "$TARBALL" -C "$(dirname "$BINARY_PATH")" "$(basename "$BINARY_PATH")"
  TARBALL_NAME=$(basename "$TARBALL")
  TARBALL_SHA=$(generate_sha256 "$TARBALL")
  info "Packaged: $TARBALL"
}

create_github_release() {
  info "Creating GitHub release..."
  gh release create "$VERSION_TAG" "$TARBALL" --title "$VERSION_TAG"
}

update_homebrew_tap() {
  info "Cloning Homebrew tap..."
  git clone "$TAP_REPO" "$TMPDIR/tap"

  FORMULA_DIR="$TMPDIR/tap/Formula"
  mkdir -p "$FORMULA_DIR"
  FORMULA_PATH="$FORMULA_DIR/$FORMULA_FILE"

  if [[ -f "$FORMULA_PATH" ]]; then
    warn "Formula file already exists: Formula/${FORMULA_FILE}"
    confirm "Overwrite existing formula file?" || exit 1
  fi

  if ! "$BINARY_PATH" "$DEFAULT_TEST_FLAG" >/dev/null 2>&1; then
    warn "The test command '${DEFAULT_TEST_FLAG}' failed for '${BINARY_PATH}'"
    confirm "Continue anyway and write formula with this test?" || exit 1
  fi

  LICENSE_TYPE=$(detect_license)
  [[ "$LICENSE_TYPE" != "UNKNOWN" ]] && info "Detected license: ${LICENSE_TYPE}"

  info "Writing Homebrew formula to Formula/${FORMULA_FILE}"
  {
    echo "class ${FORMULA_CLASS} < Formula"
    [[ -n "$DESCRIPTION" ]] && echo "  desc \"${DESCRIPTION}\""
    echo "  homepage \"${GITHUB_HOMEPAGE_BASE}/${REPO_NAME}\""
    echo "  url \"${GITHUB_HOMEPAGE_BASE}/${REPO_NAME}/releases/download/${VERSION_TAG}/${TARBALL_NAME}\""
    echo "  sha256 \"${TARBALL_SHA}\""
    [[ "$LICENSE_TYPE" != "UNKNOWN" ]] && echo "  license \"${LICENSE_TYPE}\""
    echo
    echo "  def install"
    echo "    bin.install \"${BINARY_NAME}\""
    echo "  end"
    echo
    echo "  test do"
    echo "    system \"\#{bin}/${BINARY_NAME}\", \"${DEFAULT_TEST_FLAG}\""
    echo "  end"
    echo "end"
  } > "$FORMULA_PATH"

  pushd "$TMPDIR/tap" >/dev/null
  git add "Formula/${FORMULA_FILE}"
  git commit -m "Update ${BINARY_NAME} to ${VERSION_TAG}"
  git push || { error "Failed to push Homebrew formula."; exit 1; }
  popd >/dev/null

  info "Homebrew formula updated: Formula/${FORMULA_FILE}"
}

### === Entry Point === ###
main() {
  if [[ "${1:-}" == "--version" ]]; then
    echo "$VERSION"
    exit 0
  fi

  info "Script Release $VERSION â€” Safe Script Release Tool"
  require_commands

  if ! gh auth status >/dev/null 2>&1; then
    error "GitHub CLI is not authenticated. Run 'gh auth login' before using this script."
    exit 1
  fi

  prepare_metadata
  tag_version
  package_binary
  create_github_release
  update_homebrew_tap
  cleanup
  info "âœ… Release ${VERSION_TAG} completed successfully."
}

main "$@"
